{"ast":null,"code":"import { innerFrom } from '../observable/innerFrom';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {\n  var buffer = [];\n  var active = 0;\n  var index = 0;\n  var isComplete = false;\n\n  var checkComplete = function checkComplete() {\n    if (isComplete && !buffer.length && !active) {\n      subscriber.complete();\n    }\n  };\n\n  var outerNext = function outerNext(value) {\n    return active < concurrent ? doInnerSub(value) : buffer.push(value);\n  };\n\n  var doInnerSub = function doInnerSub(value) {\n    expand && subscriber.next(value);\n    active++;\n    var innerComplete = false;\n    innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function (innerValue) {\n      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);\n\n      if (expand) {\n        outerNext(innerValue);\n      } else {\n        subscriber.next(innerValue);\n      }\n    }, function () {\n      innerComplete = true;\n    }, undefined, function () {\n      if (innerComplete) {\n        try {\n          active--;\n\n          var _loop = function _loop() {\n            var bufferedValue = buffer.shift();\n\n            if (innerSubScheduler) {\n              executeSchedule(subscriber, innerSubScheduler, function () {\n                return doInnerSub(bufferedValue);\n              });\n            } else {\n              doInnerSub(bufferedValue);\n            }\n          };\n\n          while (buffer.length && active < concurrent) {\n            _loop();\n          }\n\n          checkComplete();\n        } catch (err) {\n          subscriber.error(err);\n        }\n      }\n    }));\n  };\n\n  source.subscribe(createOperatorSubscriber(subscriber, outerNext, function () {\n    isComplete = true;\n    checkComplete();\n  }));\n  return function () {\n    additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();\n  };\n}","map":{"version":3,"sources":["C:/Users/limup/Documents/teste/MerchanCountries/MerchanCountriesAngular/MerchanCountriesAngular/ClientApp/node_modules/rxjs/dist/esm/internal/operators/mergeInternals.js"],"names":["innerFrom","executeSchedule","createOperatorSubscriber","mergeInternals","source","subscriber","project","concurrent","onBeforeNext","expand","innerSubScheduler","additionalFinalizer","buffer","active","index","isComplete","checkComplete","length","complete","outerNext","value","doInnerSub","push","next","innerComplete","subscribe","innerValue","undefined","bufferedValue","shift","err","error"],"mappings":"AAAA,SAASA,SAAT,QAA0B,yBAA1B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,UAAhC,EAA4CC,OAA5C,EAAqDC,UAArD,EAAiEC,YAAjE,EAA+EC,MAA/E,EAAuFC,iBAAvF,EAA0GC,mBAA1G,EAA+H;AAClI,MAAMC,MAAM,GAAG,EAAf;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,UAAU,GAAG,KAAjB;;AACA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxB,QAAID,UAAU,IAAI,CAACH,MAAM,CAACK,MAAtB,IAAgC,CAACJ,MAArC,EAA6C;AACzCR,MAAAA,UAAU,CAACa,QAAX;AACH;AACJ,GAJD;;AAKA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD;AAAA,WAAYP,MAAM,GAAGN,UAAT,GAAsBc,UAAU,CAACD,KAAD,CAAhC,GAA0CR,MAAM,CAACU,IAAP,CAAYF,KAAZ,CAAtD;AAAA,GAAlB;;AACA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACD,KAAD,EAAW;AAC1BX,IAAAA,MAAM,IAAIJ,UAAU,CAACkB,IAAX,CAAgBH,KAAhB,CAAV;AACAP,IAAAA,MAAM;AACN,QAAIW,aAAa,GAAG,KAApB;AACAxB,IAAAA,SAAS,CAACM,OAAO,CAACc,KAAD,EAAQN,KAAK,EAAb,CAAR,CAAT,CAAmCW,SAAnC,CAA6CvB,wBAAwB,CAACG,UAAD,EAAa,UAACqB,UAAD,EAAgB;AAC9FlB,MAAAA,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACkB,UAAD,CAAxE;;AACA,UAAIjB,MAAJ,EAAY;AACRU,QAAAA,SAAS,CAACO,UAAD,CAAT;AACH,OAFD,MAGK;AACDrB,QAAAA,UAAU,CAACkB,IAAX,CAAgBG,UAAhB;AACH;AACJ,KARoE,EAQlE,YAAM;AACLF,MAAAA,aAAa,GAAG,IAAhB;AACH,KAVoE,EAUlEG,SAVkE,EAUvD,YAAM;AAChB,UAAIH,aAAJ,EAAmB;AACf,YAAI;AACAX,UAAAA,MAAM;;AADN;AAGI,gBAAMe,aAAa,GAAGhB,MAAM,CAACiB,KAAP,EAAtB;;AACA,gBAAInB,iBAAJ,EAAuB;AACnBT,cAAAA,eAAe,CAACI,UAAD,EAAaK,iBAAb,EAAgC;AAAA,uBAAMW,UAAU,CAACO,aAAD,CAAhB;AAAA,eAAhC,CAAf;AACH,aAFD,MAGK;AACDP,cAAAA,UAAU,CAACO,aAAD,CAAV;AACH;AATL;;AAEA,iBAAOhB,MAAM,CAACK,MAAP,IAAiBJ,MAAM,GAAGN,UAAjC,EAA6C;AAAA;AAQ5C;;AACDS,UAAAA,aAAa;AAChB,SAZD,CAaA,OAAOc,GAAP,EAAY;AACRzB,UAAAA,UAAU,CAAC0B,KAAX,CAAiBD,GAAjB;AACH;AACJ;AACJ,KA7BoE,CAArE;AA8BH,GAlCD;;AAmCA1B,EAAAA,MAAM,CAACqB,SAAP,CAAiBvB,wBAAwB,CAACG,UAAD,EAAac,SAAb,EAAwB,YAAM;AACnEJ,IAAAA,UAAU,GAAG,IAAb;AACAC,IAAAA,aAAa;AAChB,GAHwC,CAAzC;AAIA,SAAO,YAAM;AACTL,IAAAA,mBAAmB,KAAK,IAAxB,IAAgCA,mBAAmB,KAAK,KAAK,CAA7D,GAAiE,KAAK,CAAtE,GAA0EA,mBAAmB,EAA7F;AACH,GAFD;AAGH","sourcesContent":["import { innerFrom } from '../observable/innerFrom';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {\n    const buffer = [];\n    let active = 0;\n    let index = 0;\n    let isComplete = false;\n    const checkComplete = () => {\n        if (isComplete && !buffer.length && !active) {\n            subscriber.complete();\n        }\n    };\n    const outerNext = (value) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n    const doInnerSub = (value) => {\n        expand && subscriber.next(value);\n        active++;\n        let innerComplete = false;\n        innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, (innerValue) => {\n            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);\n            if (expand) {\n                outerNext(innerValue);\n            }\n            else {\n                subscriber.next(innerValue);\n            }\n        }, () => {\n            innerComplete = true;\n        }, undefined, () => {\n            if (innerComplete) {\n                try {\n                    active--;\n                    while (buffer.length && active < concurrent) {\n                        const bufferedValue = buffer.shift();\n                        if (innerSubScheduler) {\n                            executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                        }\n                        else {\n                            doInnerSub(bufferedValue);\n                        }\n                    }\n                    checkComplete();\n                }\n                catch (err) {\n                    subscriber.error(err);\n                }\n            }\n        }));\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, outerNext, () => {\n        isComplete = true;\n        checkComplete();\n    }));\n    return () => {\n        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();\n    };\n}\n"]},"metadata":{},"sourceType":"module"}