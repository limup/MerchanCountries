{"ast":null,"code":"import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { timer } from '../observable/timer';\nexport function repeat(countOrConfig) {\n  var count = Infinity;\n  var delay;\n\n  if (countOrConfig != null) {\n    if (typeof countOrConfig === 'object') {\n      var _countOrConfig$count = countOrConfig.count;\n      count = _countOrConfig$count === void 0 ? Infinity : _countOrConfig$count;\n      delay = countOrConfig.delay;\n    } else {\n      count = countOrConfig;\n    }\n  }\n\n  return count <= 0 ? function () {\n    return EMPTY;\n  } : operate(function (source, subscriber) {\n    var soFar = 0;\n    var sourceSub;\n\n    var resubscribe = function resubscribe() {\n      sourceSub === null || sourceSub === void 0 ? void 0 : sourceSub.unsubscribe();\n      sourceSub = null;\n\n      if (delay != null) {\n        var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(soFar));\n        var notifierSubscriber = createOperatorSubscriber(subscriber, function () {\n          notifierSubscriber.unsubscribe();\n          subscribeToSource();\n        });\n        notifier.subscribe(notifierSubscriber);\n      } else {\n        subscribeToSource();\n      }\n    };\n\n    var subscribeToSource = function subscribeToSource() {\n      var syncUnsub = false;\n      sourceSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, function () {\n        if (++soFar < count) {\n          if (sourceSub) {\n            resubscribe();\n          } else {\n            syncUnsub = true;\n          }\n        } else {\n          subscriber.complete();\n        }\n      }));\n\n      if (syncUnsub) {\n        resubscribe();\n      }\n    };\n\n    subscribeToSource();\n  });\n}","map":{"version":3,"sources":["C:/Users/limup/OneDrive/4- Projetos/7- Tutoriais e Aprendizados/tutorial-projects/MerchanCountries/MerchanCountriesAngular/MerchanCountriesAngular/ClientApp/node_modules/rxjs/dist/esm/internal/operators/repeat.js"],"names":["EMPTY","operate","createOperatorSubscriber","innerFrom","timer","repeat","countOrConfig","count","Infinity","delay","source","subscriber","soFar","sourceSub","resubscribe","unsubscribe","notifier","notifierSubscriber","subscribeToSource","subscribe","syncUnsub","undefined","complete"],"mappings":"AAAA,SAASA,KAAT,QAAsB,qBAAtB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,OAAO,SAASC,MAAT,CAAgBC,aAAhB,EAA+B;AAClC,MAAIC,KAAK,GAAGC,QAAZ;AACA,MAAIC,KAAJ;;AACA,MAAIH,aAAa,IAAI,IAArB,EAA2B;AACvB,QAAI,OAAOA,aAAP,KAAyB,QAA7B,EAAuC;AAAA,iCACJA,aADI,CAChCC,KADgC;AAChCA,MAAAA,KADgC,qCACxBC,QADwB;AACdC,MAAAA,KADc,GACJH,aADI,CACdG,KADc;AAEtC,KAFD,MAGK;AACDF,MAAAA,KAAK,GAAGD,aAAR;AACH;AACJ;;AACD,SAAOC,KAAK,IAAI,CAAT,GACD;AAAA,WAAMP,KAAN;AAAA,GADC,GAEDC,OAAO,CAAC,UAACS,MAAD,EAASC,UAAT,EAAwB;AAC9B,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,SAAJ;;AACA,QAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtBD,MAAAA,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACE,WAAV,EAAtD;AACAF,MAAAA,SAAS,GAAG,IAAZ;;AACA,UAAIJ,KAAK,IAAI,IAAb,EAAmB;AACf,YAAMO,QAAQ,GAAG,OAAOP,KAAP,KAAiB,QAAjB,GAA4BL,KAAK,CAACK,KAAD,CAAjC,GAA2CN,SAAS,CAACM,KAAK,CAACG,KAAD,CAAN,CAArE;AACA,YAAMK,kBAAkB,GAAGf,wBAAwB,CAACS,UAAD,EAAa,YAAM;AAClEM,UAAAA,kBAAkB,CAACF,WAAnB;AACAG,UAAAA,iBAAiB;AACpB,SAHkD,CAAnD;AAIAF,QAAAA,QAAQ,CAACG,SAAT,CAAmBF,kBAAnB;AACH,OAPD,MAQK;AACDC,QAAAA,iBAAiB;AACpB;AACJ,KAdD;;AAeA,QAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5B,UAAIE,SAAS,GAAG,KAAhB;AACAP,MAAAA,SAAS,GAAGH,MAAM,CAACS,SAAP,CAAiBjB,wBAAwB,CAACS,UAAD,EAAaU,SAAb,EAAwB,YAAM;AAC/E,YAAI,EAAET,KAAF,GAAUL,KAAd,EAAqB;AACjB,cAAIM,SAAJ,EAAe;AACXC,YAAAA,WAAW;AACd,WAFD,MAGK;AACDM,YAAAA,SAAS,GAAG,IAAZ;AACH;AACJ,SAPD,MAQK;AACDT,UAAAA,UAAU,CAACW,QAAX;AACH;AACJ,OAZoD,CAAzC,CAAZ;;AAaA,UAAIF,SAAJ,EAAe;AACXN,QAAAA,WAAW;AACd;AACJ,KAlBD;;AAmBAI,IAAAA,iBAAiB;AACpB,GAtCQ,CAFb;AAyCH","sourcesContent":["import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { timer } from '../observable/timer';\nexport function repeat(countOrConfig) {\n    let count = Infinity;\n    let delay;\n    if (countOrConfig != null) {\n        if (typeof countOrConfig === 'object') {\n            ({ count = Infinity, delay } = countOrConfig);\n        }\n        else {\n            count = countOrConfig;\n        }\n    }\n    return count <= 0\n        ? () => EMPTY\n        : operate((source, subscriber) => {\n            let soFar = 0;\n            let sourceSub;\n            const resubscribe = () => {\n                sourceSub === null || sourceSub === void 0 ? void 0 : sourceSub.unsubscribe();\n                sourceSub = null;\n                if (delay != null) {\n                    const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(soFar));\n                    const notifierSubscriber = createOperatorSubscriber(subscriber, () => {\n                        notifierSubscriber.unsubscribe();\n                        subscribeToSource();\n                    });\n                    notifier.subscribe(notifierSubscriber);\n                }\n                else {\n                    subscribeToSource();\n                }\n            };\n            const subscribeToSource = () => {\n                let syncUnsub = false;\n                sourceSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, () => {\n                    if (++soFar < count) {\n                        if (sourceSub) {\n                            resubscribe();\n                        }\n                        else {\n                            syncUnsub = true;\n                        }\n                    }\n                    else {\n                        subscriber.complete();\n                    }\n                }));\n                if (syncUnsub) {\n                    resubscribe();\n                }\n            };\n            subscribeToSource();\n        });\n}\n"]},"metadata":{},"sourceType":"module"}