{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function distinct(keySelector, flushes) {\n  return operate(function (source, subscriber) {\n    var distinctKeys = new Set();\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var key = keySelector ? keySelector(value) : value;\n\n      if (!distinctKeys.has(key)) {\n        distinctKeys.add(key);\n        subscriber.next(value);\n      }\n    }));\n    flushes === null || flushes === void 0 ? void 0 : flushes.subscribe(createOperatorSubscriber(subscriber, function () {\n      return distinctKeys.clear();\n    }, noop));\n  });\n}","map":{"version":3,"sources":["C:/Users/limup/Documents/teste/MerchanCountries/MerchanCountriesAngular/MerchanCountriesAngular/ClientApp/node_modules/rxjs/dist/esm/internal/operators/distinct.js"],"names":["operate","createOperatorSubscriber","noop","distinct","keySelector","flushes","source","subscriber","distinctKeys","Set","subscribe","value","key","has","add","next","clear"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,OAAO,SAASC,QAAT,CAAkBC,WAAlB,EAA+BC,OAA/B,EAAwC;AAC3C,SAAOL,OAAO,CAAC,UAACM,MAAD,EAASC,UAAT,EAAwB;AACnC,QAAMC,YAAY,GAAG,IAAIC,GAAJ,EAArB;AACAH,IAAAA,MAAM,CAACI,SAAP,CAAiBT,wBAAwB,CAACM,UAAD,EAAa,UAACI,KAAD,EAAW;AAC7D,UAAMC,GAAG,GAAGR,WAAW,GAAGA,WAAW,CAACO,KAAD,CAAd,GAAwBA,KAA/C;;AACA,UAAI,CAACH,YAAY,CAACK,GAAb,CAAiBD,GAAjB,CAAL,EAA4B;AACxBJ,QAAAA,YAAY,CAACM,GAAb,CAAiBF,GAAjB;AACAL,QAAAA,UAAU,CAACQ,IAAX,CAAgBJ,KAAhB;AACH;AACJ,KANwC,CAAzC;AAOAN,IAAAA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACK,SAAR,CAAkBT,wBAAwB,CAACM,UAAD,EAAa;AAAA,aAAMC,YAAY,CAACQ,KAAb,EAAN;AAAA,KAAb,EAAyCd,IAAzC,CAA1C,CAAlD;AACH,GAVa,CAAd;AAWH","sourcesContent":["import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function distinct(keySelector, flushes) {\n    return operate((source, subscriber) => {\n        const distinctKeys = new Set();\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const key = keySelector ? keySelector(value) : value;\n            if (!distinctKeys.has(key)) {\n                distinctKeys.add(key);\n                subscriber.next(value);\n            }\n        }));\n        flushes === null || flushes === void 0 ? void 0 : flushes.subscribe(createOperatorSubscriber(subscriber, () => distinctKeys.clear(), noop));\n    });\n}\n"]},"metadata":{},"sourceType":"module"}