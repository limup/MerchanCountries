{"ast":null,"code":"import { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function sample(notifier) {\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    var lastValue = null;\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      lastValue = value;\n    }));\n    notifier.subscribe(createOperatorSubscriber(subscriber, function () {\n      if (hasValue) {\n        hasValue = false;\n        var value = lastValue;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    }, noop));\n  });\n}","map":{"version":3,"sources":["C:/Users/limup/OneDrive/4- Projetos/7- Tutoriais e Aprendizados/tutorial-projects/MerchanCountries/MerchanCountriesAngular/MerchanCountriesAngular/ClientApp/node_modules/rxjs/dist/esm/internal/operators/sample.js"],"names":["operate","noop","createOperatorSubscriber","sample","notifier","source","subscriber","hasValue","lastValue","subscribe","value","next"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,OAAO,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AAC7B,SAAOJ,OAAO,CAAC,UAACK,MAAD,EAASC,UAAT,EAAwB;AACnC,QAAIC,QAAQ,GAAG,KAAf;AACA,QAAIC,SAAS,GAAG,IAAhB;AACAH,IAAAA,MAAM,CAACI,SAAP,CAAiBP,wBAAwB,CAACI,UAAD,EAAa,UAACI,KAAD,EAAW;AAC7DH,MAAAA,QAAQ,GAAG,IAAX;AACAC,MAAAA,SAAS,GAAGE,KAAZ;AACH,KAHwC,CAAzC;AAIAN,IAAAA,QAAQ,CAACK,SAAT,CAAmBP,wBAAwB,CAACI,UAAD,EAAa,YAAM;AAC1D,UAAIC,QAAJ,EAAc;AACVA,QAAAA,QAAQ,GAAG,KAAX;AACA,YAAMG,KAAK,GAAGF,SAAd;AACAA,QAAAA,SAAS,GAAG,IAAZ;AACAF,QAAAA,UAAU,CAACK,IAAX,CAAgBD,KAAhB;AACH;AACJ,KAP0C,EAOxCT,IAPwC,CAA3C;AAQH,GAfa,CAAd;AAgBH","sourcesContent":["import { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function sample(notifier) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        let lastValue = null;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            lastValue = value;\n        }));\n        notifier.subscribe(createOperatorSubscriber(subscriber, () => {\n            if (hasValue) {\n                hasValue = false;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n        }, noop));\n    });\n}\n"]},"metadata":{},"sourceType":"module"}