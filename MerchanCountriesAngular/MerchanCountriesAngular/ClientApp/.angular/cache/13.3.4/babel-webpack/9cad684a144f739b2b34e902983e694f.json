{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function find(predicate, thisArg) {\n  return operate(createFind(predicate, thisArg, 'value'));\n}\nexport function createFind(predicate, thisArg, emit) {\n  var findIndex = emit === 'index';\n  return function (source, subscriber) {\n    var index = 0;\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var i = index++;\n\n      if (predicate.call(thisArg, value, i, source)) {\n        subscriber.next(findIndex ? i : value);\n        subscriber.complete();\n      }\n    }, function () {\n      subscriber.next(findIndex ? -1 : undefined);\n      subscriber.complete();\n    }));\n  };\n}","map":{"version":3,"sources":["C:/Users/limup/OneDrive/4- Projetos/7- Tutoriais e Aprendizados/tutorial-projects/MerchanCountries/MerchanCountriesAngular/MerchanCountriesAngular/ClientApp/node_modules/rxjs/dist/esm/internal/operators/find.js"],"names":["operate","createOperatorSubscriber","find","predicate","thisArg","createFind","emit","findIndex","source","subscriber","index","subscribe","value","i","call","next","complete","undefined"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,OAAO,SAASC,IAAT,CAAcC,SAAd,EAAyBC,OAAzB,EAAkC;AACrC,SAAOJ,OAAO,CAACK,UAAU,CAACF,SAAD,EAAYC,OAAZ,EAAqB,OAArB,CAAX,CAAd;AACH;AACD,OAAO,SAASC,UAAT,CAAoBF,SAApB,EAA+BC,OAA/B,EAAwCE,IAAxC,EAA8C;AACjD,MAAMC,SAAS,GAAGD,IAAI,KAAK,OAA3B;AACA,SAAO,UAACE,MAAD,EAASC,UAAT,EAAwB;AAC3B,QAAIC,KAAK,GAAG,CAAZ;AACAF,IAAAA,MAAM,CAACG,SAAP,CAAiBV,wBAAwB,CAACQ,UAAD,EAAa,UAACG,KAAD,EAAW;AAC7D,UAAMC,CAAC,GAAGH,KAAK,EAAf;;AACA,UAAIP,SAAS,CAACW,IAAV,CAAeV,OAAf,EAAwBQ,KAAxB,EAA+BC,CAA/B,EAAkCL,MAAlC,CAAJ,EAA+C;AAC3CC,QAAAA,UAAU,CAACM,IAAX,CAAgBR,SAAS,GAAGM,CAAH,GAAOD,KAAhC;AACAH,QAAAA,UAAU,CAACO,QAAX;AACH;AACJ,KANwC,EAMtC,YAAM;AACLP,MAAAA,UAAU,CAACM,IAAX,CAAgBR,SAAS,GAAG,CAAC,CAAJ,GAAQU,SAAjC;AACAR,MAAAA,UAAU,CAACO,QAAX;AACH,KATwC,CAAzC;AAUH,GAZD;AAaH","sourcesContent":["import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function find(predicate, thisArg) {\n    return operate(createFind(predicate, thisArg, 'value'));\n}\nexport function createFind(predicate, thisArg, emit) {\n    const findIndex = emit === 'index';\n    return (source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const i = index++;\n            if (predicate.call(thisArg, value, i, source)) {\n                subscriber.next(findIndex ? i : value);\n                subscriber.complete();\n            }\n        }, () => {\n            subscriber.next(findIndex ? -1 : undefined);\n            subscriber.complete();\n        }));\n    };\n}\n"]},"metadata":{},"sourceType":"module"}